// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  name          String
  email         String       @unique
  password      String
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  user_roles         UserRole[]
  user_permissions   UserPermission[]
  tasks         Task[]
  comments      Comment[]
  notifications Notification[]
  events        Event[]
  messages_sended        Message[] @relation("Sender")
  messages_received      Message[] @relation("Receiver")
}

model Role {
  id         Int        @id @default(autoincrement())
  name       String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  user_roles      UserRole[]
}

model Permission {
  id         Int        @id @default(autoincrement())
  name       String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  users_permissions      UserPermission[]
}

model UserRole {
  id         Int        @id @default(autoincrement())
  user_id    Int
  role_id    Int
  user       User       @relation(fields: [user_id], references: [id])
  role       Role       @relation(fields: [role_id], references: [id])
}

model UserPermission {
  id            Int         @id @default(autoincrement())
  user_id       Int
  permission_id Int
  user          User        @relation(fields: [user_id], references: [id])
  permission    Permission  @relation(fields: [permission_id], references: [id])
}

model Organization {
  id         Int          @id @default(autoincrement())
  name       String
  address    String
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  projects   Project[]
}

model Project {
  id               Int       @id @default(autoincrement())
  name             String
  description      String
  start_date       DateTime
  end_date         DateTime?
  organization     Organization  @relation(fields: [organization_id], references: [id])
  organization_id  Int
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  tasks            Task[]
}

model Task {
  id            Int       @id @default(autoincrement())
  name          String
  description   String
  due_date      DateTime
  project       Project   @relation(fields: [project_id], references: [id])
  project_id    Int
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  comments      Comment[]
  attachments   Attachment[]
  task_categories    TaskCategory[]
  user_id       Int
  user          User      @relation(fields: [user_id], references: [id])
}

model Comment {
  id            Int       @id @default(autoincrement())
  content       String
  task          Task      @relation(fields: [task_id], references: [id])
  task_id       Int
  user          User      @relation(fields: [user_id], references: [id])
  user_id       Int
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}

model Attachment {
  id            Int       @id @default(autoincrement())
  filename      String
  url           String
  task          Task      @relation(fields: [task_id], references: [id])
  task_id       Int
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}

model Category {
  id             Int         @id @default(autoincrement())
  name           String
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  tasks_categories  TaskCategory[]
}

model TaskCategory {
  id             Int         @id @default(autoincrement())
  task           Task        @relation(fields: [task_id], references: [id])
  task_id        Int
  category       Category    @relation(fields: [category_id], references: [id])
  category_id    Int
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
}

model Notification {
  id            Int         @id @default(autoincrement())
  content       String
  user          User        @relation(fields: [user_id], references: [id])
  user_id       Int
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
}

model Message {
  id            Int         @id @default(autoincrement())
  content       String
  sender        User        @relation("Sender", fields: [sender_id], references: [id])
  sender_id     Int
  receiver      User        @relation("Receiver", fields: [receiver_id], references: [id])
  receiver_id   Int
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  user_id       Int
}

model Event {
  id            Int         @id @default(autoincrement())
  name          String
  date          DateTime
  user          User        @relation(fields: [user_id], references: [id])
  user_id       Int
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
}
